syntax = "proto3";

option csharp_namespace = "DnsTools.Worker";

import "google/protobuf/empty.proto";

service DnsToolsWorker {
  rpc Ping (PingRequest) returns (stream PingResponse);
  rpc Traceroute (TracerouteRequest) returns (stream TracerouteResponse);
  rpc DnsLookup (DnsLookupRequest) returns (stream DnsLookupResponse);
  rpc DnsTraversal (DnsTraversalRequest) returns (stream DnsTraversalResponse);
}

enum Protocol {
  ANY = 0;
  IPV4 = 1;
  IPV6 = 2;
}

message TracerouteRequest {
  string host = 1;
  Protocol protocol = 2;
}

message TracerouteResponse {
  oneof response {
    TracerouteReply reply = 1;
    PingTimeout timeout = 2;
    Error error = 3;
    google.protobuf.Empty completed = 4;
    HostLookupResult lookup = 5;

  }
}

message TracerouteReply {
  int32 seq = 1;
  string ip = 2;
  float rtt = 3;
}

message PingRequest {
  string host = 1;
  Protocol protocol = 2;
}

message PingResponse {
  oneof response {
    PingReply reply = 1;
    PingTimeout timeout = 2;
    PingSummary summary = 3;
    Error error = 4;
    HostLookupResult lookup = 5;
  }
}

message PingReply {
  float rtt = 1;
  int32 ttl = 2;
  int32 seq = 3;
  int32 bytes = 4;
}

message PingTimeout {
  int32 seq = 1;
}

message PingSummary {
  int32 sent = 1;
  int32 received = 2;
}

message HostLookupResult {
  string ip = 1;
}

message DnsLookupRequest {
  string host = 1;
  DnsLookupType type = 2;
  string server = 3;
}

message DnsTraversalRequest {
  string host = 1;
  DnsLookupType type = 2;
  repeated string servers = 3;
}

message DnsLookupResponse {
  uint32 duration = 1;
  oneof response {
    DnsLookupReply reply = 2;
    Error error = 3;
    DnsLookupReferral referral = 4;
  }
}

message DnsLookupReferral {
  string prev_server_name = 1;
  string prev_server_ip = 2;
  string next_server_name = 3;
  repeated string next_server_ips = 4;
  DnsLookupReply reply = 5;
}

message DnsLookupReply {
  string from = 1;
  repeated DnsRecord answers = 2;
  repeated DnsRecord authorities = 3;
  repeated DnsRecord additionals = 4;
}

message DnsTraversalResponse {
  string from = 1;
  uint32 level = 2;
  uint32 duration = 3;
  oneof response {
    DnsLookupReply reply = 4;
    Error error = 5;
  }
}

message DnsRecord {
  string name = 1;
  int32 ttl = 2;
  oneof record {
    DnsARecord a = 3;
    DnsAAAARecord aaaa = 4;
    DnsCAARecord caa = 5;
    DnsCNAMERecord cname = 6;
    DnsMXRecord mx = 7;
    DnsNSRecord ns = 8;
    DnsPTRRecord ptr = 9;
    DnsSOARecord soa = 10;
    DnsTXTRecord txt = 11;
  }
}

message DnsARecord {
  string address = 1;
}

message DnsAAAARecord {
  string address = 1;
}

message DnsCAARecord {
  string value = 1;
}

message DnsCNAMERecord {
  string cname = 1;
}

message DnsMXRecord {
  string exchange = 1;
  uint32 preference = 2;
}

message DnsNSRecord {
  string nsdname = 1;
}

message DnsPTRRecord {
  string ptrdname = 1;
}

message DnsSOARecord {
  string mname = 1;
  string rname = 2;
  uint32 serial = 3;
  uint32 refresh = 4;
  uint32 retry = 5;
  uint32 expire = 6;
  uint32 minimum = 7;
}

message DnsTXTRecord {
  string text = 1;
}

enum DnsLookupType {
  A = 0;
  AAAA = 1;
  CNAME = 2;
  MX = 3;
  NS = 4;
  PTR = 5;
  SOA = 6;
  TXT = 7;
  CAA = 8;
}

message Error {
  string message = 1;
  string title = 2;
}
